// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS (INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, created_at, updated_at, user_id, feed_id)
SELECT
    i.id, i.created_at, i.updated_at, i.user_id, i.feed_id,
    f.name AS feed_name,
    u.name AS user_name
FROM inserted_feed_follow i
INNER JOIN users u ON u.id = i.user_id
INNER JOIN feeds f ON f.id = i.feed_id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT f.id,f.url,f.name as "Feedname" FROM feed_follows ff 
INNER JOIN users u ON ff.user_id = u.id 
INNER JOIN feeds f on ff.feed_id = f.id
WHERE u.id = $1
`

type GetFeedFollowsForUserRow struct {
	ID       uuid.UUID
	Url      string
	Feedname string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, id uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.ID, &i.Url, &i.Feedname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowFeed = `-- name: UnfollowFeed :one
WITH deleted_follow AS(
DELETE FROM feed_follows USING feeds 
WHERE feeds.ID = feed_follows.feed_id 
AND feeds.url = $1 
AND feed_follows.user_id = $2
RETURNING feed_follows.feed_id)
SELECT feeds.name FROM feeds INNER JOIN deleted_follow
ON deleted_follow.feed_id = feeds.id
`

type UnfollowFeedParams struct {
	Url    string
	UserID uuid.UUID
}

func (q *Queries) UnfollowFeed(ctx context.Context, arg UnfollowFeedParams) (string, error) {
	row := q.db.QueryRowContext(ctx, unfollowFeed, arg.Url, arg.UserID)
	var name string
	err := row.Scan(&name)
	return name, err
}
